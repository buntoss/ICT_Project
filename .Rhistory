#df_managementJobs,
df_securityJobs,
df_telecomJobs,
df_testingJobs)
#change the appropriate characters into factors so that the "levels" can be represented
df_ITIJobs$Classification = as.factor(df_ITIJobs$Classification)
df_ITIJobs$Level = as.factor(df_ITIJobs$Level)
df_ITIJobs$JobType = as.factor(df_ITIJobs$JobType)
#plot out the most commonly occuring classifications
plot(df_ITIJobs$Classification)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(df_ITIJobs)
runApp()
runApp()
runApp()
runApp()
?renderTable
?renderDataTable
runApp()
?options
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("memoise")
library(memoise)
?memoise
?sprintf
runApp()
runApp()
rm(classifications)
rm(classifcations)
rm(getTermMatrix)
rm(tdm_JobandSkills)
runApp()
rm(classifications)
runApp()
runApp()
str(getTermMatrix)
getTermMatrix()
runApp()
?wordcloud
# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
shinyServer(function(input, output, session) {
# The below output$classificationPlot is used for plotting the classification bar graph
output$classificationPlot <- renderPlot({
# generate bins based on input$bins from ui.R
jclass    <- df_ITIJobs$Classification
# plot out the job classifications
plot(jclass, col = 'darkgray', border = 'white')
})
# Define a reactive expression for the document term matrix
terms <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
isolate({
withProgress({
setProgress(message = "Processing corpus...")
getTermMatrix(input$selection)
})
})
})
# Make the wordcloud drawing predictable during a session
wordcloud_rep <- repeatable(wordcloud)
# The below output$wordcloudPlot is used for plotting the skills wordcloud
output$wordcloudPlot <- renderPlot({
# The below code is needed to set the word frequency limit
x <- terms()
# Code needs to be added that edits the 'max.words' output
wordcloud_rep(names(x), x, min.freq = input$freq, max.words = input$max, colors = "red")
})
# The below output$rawDataset is used for displaying the raw data used in this analysis
output$rawDataset <- renderPrint({
rawDisplay <- df_ITIJobs[0:100,c("Classification", "Date")]
print(rawDisplay)
})
})
Terms()
terms()
books
View(df_ITIJobs)
rm(classifications)
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(classifications, getTermMatrix)
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
runApp()
runApp()
runApp()
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
?png
?wordcloud
??wordcloud
shiny::runApp()
?rngfunc
??rngfunc
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
??wordcloud
runApp()
runApp()
runApp()
install.packages("wordcloud")
install.packages("wordcloud")
library(wordcloud)
install.packages("wordcloud")
install.packages("wordcloud")
library(wordcloud)
rm(list = ls(all.names = ""))
shiny::runApp()
###################################################################################################################################
#### Make sure to have the 'twoThousandJobs.csv' file in your project directory. This is the source dataset that we import into the working environment using the below code
df_twoThousandJobs <- read.csv("~/R/win-library/3.3/ICT_Project_TEST/twoThousandJobs.csv", stringsAsFactors=FALSE)
# clean the date column so that it can be represented as a DATE. This will enable R to interpret it for time relevant analysis
df_twoThousandJobs$Date <- sub("categorized-","",df_twoThousandJobs$Date)
df_twoThousandJobs$Date <- as.Date(df_twoThousandJobs$Date)
# Subsetting the Jobs by there classifications e.g. Developer, Business Analyst and Consultant
df_developerJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Developer")
#df_businessAnalystJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Business Analysts")
#df_consultantJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Consultants")
df_architectsJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Architects")
#df_administrationJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Administration")
df_databaseJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Database Development")
df_engineeringJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Engineering")
#df_helpDeskJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Help Desk and Support")
df_securityJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Security")
#df_managementJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Management")
df_telecomJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Telecommunications")
df_testingJobs <- subset(df_twoThousandJobs, df_twoThousandJobs$Classification == " Testing and Quality")
#####################The below code is for generating plot that displays most commonly occuring classification
########This shows us job markets in demand
#get only IT categories by binding all of the already subsetted classifications
df_ITIJobs <- rbind(
#df_administrationJobs,
df_architectsJobs,
#df_businessAnalystJobs,
#df_consultantJobs,
df_databaseJobs,
df_developerJobs,
df_engineeringJobs,
#df_helpDeskJobs,
#df_managementJobs,
df_securityJobs,
df_telecomJobs,
df_testingJobs)
#change the appropriate characters into factors so that the "levels" can be represented
df_ITIJobs$Classification = as.factor(df_ITIJobs$Classification)
df_ITIJobs$Level = as.factor(df_ITIJobs$Level)
df_ITIJobs$JobType = as.factor(df_ITIJobs$JobType)
runApp()
runApp()
runApp()
rm(list = ls(all.names = ""))
runApp()
str(classifications)
classifications
classifications[1]
runApp()
runApp()
classifications
str(classifications)
rm(list = ls(all.names = ""))
runApp()
str(classifications)
classifications$`All IT Jobs`
?selectInput
runApp()
runApp()
?cex
??cex
runApp()
View(df_securityJobs)
runApp()
runApp()
rm(list=ls(all.names = ""))
runApp()
str(classifications)
runApp()
rm(list = ls(all.names = ""))
?hr
?sidebarPanel
runApp()
runApp()
shiny::runApp()
selectInput(?)
?selectInput
runApp()
rm(list = ls(all.names = ""))
runApp()
str(classifications)
ls_ITIJobs <- c(df_ITIJobs, df_architectsJobs)
str(ls_ITIJobs)
ls_ITIJobs[df_ITIJobs$Description]
runApp()
?data
ls_ITIJobs["df_ITIJobs"]
ls_ITIJobs["df_ITIJobs"]
ls_ITIJobs[["df_ITIJobs"]]
ls_ITIJobs[['df_architectsJobs']]
ls_ITIJobs[[2]]
ls_ITIJobs[2]
ls_ITIJobs
str(ls_ITIJobs)
ls_ITIJobs <- list(df_ITIJobs, df_architectsJobs)
ls_ITIJobs[["df_ITIJobs"]]
ls_ITIJobs[[df_ITIJobs]]
str(ls_ITIJobs)
names(ls_ITIJobs) <- c("df_ITIJobs", "df_architectsJobs")
str(ls_ITIJobs)
ls_ITIJobs[[df_ITIJobs]]
ls_ITIJobs[["df_ITIJobs"]]
ls_ITIJobs[["df_ITIJobs"]][2]
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
runApp()
str(ls_ITIJobs)
runApp()
runApp()
runApp()
rm(list = ls(all.names = ""))
runApp()
classifications
rm(list=ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
runApp()
runApp()
rm(list = ls(all.names = ""))
runApp()
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
runApp()
runApp()
rm(list = ls(all.names = ""))
runApp()
runApp()
runApp()
str(ls_ITIJobs)
runApp()
rm(list = ls(all.names = ""))
runApp()
rm(list = ls(all.names = ""))
shiny::runApp()
runApp()
runApp()
runApp()
rm(list = ls(all.names = ""))
closeAllConnections()
shiny::runApp()
runApp()
rm(list = ls)
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
runApp()
runApp()
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
runApp()
library(tm)
install.packages(tm)
runApp()
# This is the user-interface definition of a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
# the 'dashboardPage()' function specifies that we are using dashboard strucutre
dashboardPage(
dashboardHeader(title = "Job Market Analysis"),
# sidebarMenu, menuItems are linked with the tabItems,tabItem code
dashboardSidebar(
sidebarMenu(
menuItem("Main", tabName = "main"),
menuItem("Word Cloud", tabName = "cloud"),
menuItem("Time Series Analysis", tabName = "freq"),
menuItem("Geographical", tabName = "geo")
)
),
dashboardBody(# the below code corresponds to the sidebarMenue, menuItem code
tabItems(
# this tabItem 'main' will display the basic must have requirements
# which includes 'Displaying Job markets showing growth'
# as well as 'Skills that will be in demand'
tabItem(
"main",
h1("Welcome - Main"),
br(),
fluidRow(column(
12,
box(
width = 12,
p(
"The objective of this application is to analysis job market trends and
present the findings in an accessible format for various users. This
application offers simplistic functionalities to users as well as a
framework from which future developers can build from. A Link to the
GitHub project for this application can be found:"
),
helpText(
a("github.com/buntoss/ICT_Project", href = "https://github.com/buntoss/ICT_Project", colors = "white")
)
,
p(
"An example of some of the data used for this project can be seen below."
)
)
)),
fluidRow(column(
12,
box(
width = 12,
title = "Raw Dataset",
dataTableOutput("rawDataset")
)
))
),
# this tabItem 'cloud' will display purely cloud data
tabItem(
"cloud",
h1("Skills by Classification - Wordcloud Analysis"),
br(),
box(width = 12,
plotOutput(
"wordcloudPlot", width = "100%", height = 400
)),
fluidRow(column(
4,
box(
width = 12,
background = "light-blue",
title = "Wordcloud of Skills",
p(
"The above image displays frequently mentioned words by classification.
The input variables can be changed to display frequently occuring words
for all 'Information Technology Jobs' or a specific sub classification
for that industry e.g. IT Architecture Jobs."
)
)
),
column(
8,
sidebarPanel(
width = 12,
selectInput("selection", "Choose a Classification:",
choices = classifications),
actionButton("update", "Update"),
hr(),
sliderInput(
"freq",
"Minimum Frequency:",
min = 1,
max = 20,
value = 5
),
sliderInput(
"max",
"Maximum Number of Words:",
min = 1,
max = 100,
value = 40
)
)
))
),
# this tabItem 'jobs' will display purely job classification data
tabItem(
"freq"
,
h1("Job Market Growth - Time Series Analysis"),
br(),
fluidRow(column(
12,
box(
width = 12,
title = "Information Technology Industry Job Postings",
plotOutput("jobFreqPlot", width = "100%", height = 300)
)
)),
fluidRow(column(
8,
box(
width = 12,
background = "light-blue",
title = "Time Series Analysis",
p(
"The above plots display time series data for frequency
of Job Postings by classification from 2007 till 2016.
The main plot displays all Information Technology
Industry Job Postings and the other plots diplay Job
Postings for each sub classification."
)
)
),
column(
4,
box(
width = 12,
title = "Network and Hardware Engineering",
plotOutput("engiFreqPlot", width = "100%", height = 100)
)
)),
fluidRow(column(
4,
box(
width = 12,
title = "Software Testing",
plotOutput("testFreqPlot", width = "100%", height = 100)
)
),
column(
4,
box(
width = 12,
title = "Database Developer",
plotOutput("dbasFreqPlot", width = "100%", height = 100)
)
),
column(
4,
box(
width = 12,
title = "Software Developer",
plotOutput("devFreqPlot", width = "100%", height = 100)
)
)),
fluidRow(column(
4,
box(
width = 12,
title = "IT Architecture",
plotOutput("archFreqPlot", width = "100%", height = 100)
)
),
column(
4,
box(
width = 12,
title = "IT Security",
plotOutput("secFreqPlot", width = "100%", height = 100)
)
),
column(
4,
box(
width = 12,
title = "IT Telecommunications",
plotOutput("teleFreqPlot", width = "100%", height = 100)
)
))
),
tabItem("geo",
h2("Future Development - to be continued")),
# this tabItem 'raw' will display the original raw dataset
# that was subsetted for the Job Market analysis
tabItem("raw",
fluidRow(column(
12
)))
))
)
runApp()
