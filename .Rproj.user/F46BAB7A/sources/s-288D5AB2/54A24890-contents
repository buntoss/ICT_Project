




# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#

shinyServer(function(input, output, session) {
  
  #######################################################################
  ########## The below code is used to generate a plot describing job availabilities over time
  ########## over 10 years.
  
  # Define a reactive expression for the time series plot
  # main
  output$jobFreqPlot  <- renderPlot({
    freq_x <- freq_timeSeriesJobs
    print(ggplot(data = freq_x,
               aes(
                 x = freq_x$Date,
                 y = freq_x$Frequency,
                 group = freq_x$Classification
               )) + geom_line(aes(color = freq_x$Classification)))
  })
  
  # architects
  output$archFreqPlot <- renderPlot({
    freq_x <- freq_architectsJobs
    print(ggplot(data = freq_x,
                  aes(
                    x = freq_x$Date,
                    y = freq_x$Frequency,
                    group = 1
                  ))  + geom_line(color = "red"))
  })
  
  # databases
  output$dbasFreqPlot <- renderPlot({
    freq_x <- freq_databaseJobs
    print(ggplot(data = freq_x,
                 aes(
                   x = freq_x$Date,
                   y = freq_x$Frequency,
                   group = 1
                 ))  + geom_line(color = "red"))
  })
  
  # developer
  output$devFreqPlot <- renderPlot({
    freq_x <- freq_developerJobs
    print(ggplot(data = freq_x,
                 aes(
                   x = freq_x$Date,
                   y = freq_x$Frequency,
                   group = 1
                 ))  + geom_line(color = "red"))
  })
  
  # engineer
  output$engiFreqPlot <- renderPlot({
    freq_x <- freq_engineeringJobs
    print(ggplot(data = freq_x,
                 aes(
                   x = freq_x$Date,
                   y = freq_x$Frequency,
                   group = 1
                 ))  + geom_line(color = "red"))
  })
  
  # security
  output$secFreqPlot <- renderPlot({
    freq_x <- freq_securityJobs
    print(ggplot(data = freq_x,
                 aes(
                   x = freq_x$Date,
                   y = freq_x$Frequency,
                   group = 1
                 ))  + geom_line(color = "red"))
  })
  
  # telecommunications
  output$teleFreqPlot <- renderPlot({
    freq_x <- freq_telecomJobs
    print(ggplot(data = freq_x,
                 aes(
                   x = freq_x$Date,
                   y = freq_x$Frequency,
                   group = 1
                 ))  + geom_line(color = "red"))
  })
  
  # testing
  output$testFreqPlot <- renderPlot({
    freq_x <- freq_testingJobs
    print(ggplot(data = freq_x,
                 aes(
                   x = freq_x$Date,
                   y = freq_x$Frequency,
                   group = 1
                 ))  + geom_line(color = "red"))
  })
  
  
  #########################################################################
  ##### The below code is for the bar chart plot
  
  # The below output$classificationPlot is used for plotting the classification bar graph
  
  output$classificationPlot <- renderPlot({
    
    # generate bins based on input$bins from ui.R
    
    jclass    <- df_ITIJobs$Classification
    
    # plot out the job classifications
    
    plot(jclass, col = 'darkgray', border = 'white')
  })
  
  
  ######################################################################
  ###### The below code is for the wordlcloud plot
  
  # Define a reactive expression for the document term matrix
  
  terms <- reactive({
    
    # Change when the "update" button is pressed...
    
    input$update
    
    # ...but not for anything else
    
    isolate({
      withProgress({
        setProgress(message = "Processing corpus...")
        getTermMatrix(input$selection)
      })
    })
  })
  
  
  # Make the wordcloud drawing predictable during a session
  
  wordcloud_rep <- repeatable(wordcloud)
  
  # The below output$wordcloudPlot is used for plotting the skills wordcloud
  
  output$wordcloudPlot <- renderPlot({
    
    # The below code is needed to set the word frequency limit
    
    x <- terms()
    
    # Code needs to be added that edits the 'max.words' output
    
    wordcloud_rep(
      names(x),
      x,
      scale = c(5, 0.5),
      min.freq = input$freq,
      max.words = input$max,
      colors = brewer.pal(8, "Dark2")
    )
  })
  
  
  
  ################################################################################
  # The below output$rawDataset is used for displaying the raw data used in this analysis
  
  # word cloud and freq
  output$rawDataset <- renderDataTable(
    df_ITIJobs)

  
  # time series raw dataset
  output$tsrawDataset <- renderDataTable(
    df_timeSeriesJobs$Date <- sub("..", "", df_timeSeriesJobs$Date),
    df_timeSeriesJobs)
  
  
  
})
